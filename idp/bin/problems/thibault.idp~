vocabulary  V {
	type RuleNr isa int
	type Penalty isa int
	type Object
	type Time

	type Fork isa Object 
	type Knife isa Object
	type Spoon isa Object
	type SmallKnife isa Object
	
	type Plate isa Object
	type Bowl isa Object
	type PastaPlate isa Object
	type SoupPlate isa Object
	type Saucer isa Object

	type WaterGlass isa Object 
	type WineGlass isa Object
	type TeaCup isa Object

	type Breakfast isa Time
	type Lunch isa Time
	type Dinner isa Time

	type PossCo isa int

	fork(Fork)
	knife(Knife)
	spoon(Spoon)
	smallKnife(SmallKnife)

	plate(Plate)
	bowl(Bowl)
	pastaPlate(PastaPlate)
	soupPlate(SoupPlate)
	saucer(Saucer)

	waterGlass(WaterGlass)
	wineGlass(WineGlass)
	teaCup(TeaCup)

	food_container(Object)
	drink_container(Object)
	food_utensil(Object)

	above_of(Object, Object)
	left_of(Object, Object)
	on(Object, Object)

	position(PossCo,PossCo,PossCo,Object)
	time(Time)

	there_is_a_fork
	there_is_a_knife
	there_is_a_spoon
	there_is_a_smallKnife
	there_is_a_plate
	there_is_a_bowl
	there_is_a_pastaPlate
	there_is_a_soupPlate
	there_is_a_saucer
	there_is_a_waterGlass
	there_is_a_wineGlass
	there_is_a_teaCup
	
	breakfastTime(Breakfast)
	lunchTime(Lunch)
	dinnerTime(Dinner)

	breakfast
	lunch
	dinner
	
	penalty(RuleNr, Penalty)
}

term penaltyTerm:V{
	sum{X, Y : penalty(X, Y) : Y}
}

theory T : V {
// Necessary background rules
!A, B: above_of(A, B) <=>  ? X, Y1, Y2, Z1, Z2 :(position(X, Y1, Z1, A) & position(X, Y2, Z2, B) & Y1 < Y2).
!A, B: left_of(A, B) <=> ? X1, X2, Y, Z1, Z2 : (position(X1, Y, Z1, A) & position(X2, Y, Z2, B) & X1 + 1 = X2).
!A, B: on(A, B) <=> ? X, Y, Z1, Z2 : (position(X, Y, Z1, A) & position(X, Y, Z2, B) & Z1 < Z2).

(there_is_a_fork) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & fork(Object).
(there_is_a_knife) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & knife(Object).
(there_is_a_spoon) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & spoon(Object).
(there_is_a_smallKnife) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & smallKnife(Object).
(there_is_a_plate) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & plate(Object).
(there_is_a_bowl) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & bowl(Object).
(there_is_a_pastaPlate) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & pastaPlate(Object).
(there_is_a_soupPlate) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & soupPlate(Object).
(there_is_a_saucer) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & saucer(Object).
(there_is_a_waterGlass) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & waterGlass(Object).
(there_is_a_wineGlass) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & wineGlass(Object).
(there_is_a_teaCup) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & teaCup(Object).

breakfast <=> ?T : time(T) & breakfastTime(T).
lunch <=> ?T : time(T) & lunchTime(T).
dinner <=> ?T : time(T) & dinnerTime(T).


// Rules that always have to satisfy

// Maximum set of rules that have to satisfy with penalty
{

penalty(0, 1) <- ~(!X, Y : ( fork(X) & there_is_a_knife & above_of(X,Y) ) => ( false)). 
penalty(1, 1) <- ~(!X : ( fork(X) & there_is_a_bowl ) => ( there_is_a_knife)). 
penalty(2, 1) <- ~(!X : ( fork(X) ) => ( there_is_a_knife | there_is_a_pastaPlate)). 
penalty(3, 1) <- ~(!X : ( fork(X) & there_is_a_teaCup ) => ( there_is_a_knife)). 
penalty(4, 1) <- ~(!X, Y : ( fork(X) & left_of(X,Y) ) => ( there_is_a_knife)). 
penalty(5, 1) <- ~(!X : ( fork(X) & breakfast ) => ( there_is_a_knife)). 
penalty(6, 1) <- ~(!X, Y : ( fork(X) & above_of(X,Y) ) => ( there_is_a_spoon)). 
penalty(7, 1) <- ~(!X, Y : ( fork(X) & there_is_a_plate & above_of(X,Y) ) => ( false)). 
penalty(8, 1) <- ~(!X : ( fork(X) & there_is_a_bowl ) => ( there_is_a_plate)). 
penalty(9, 1) <- ~(!X : ( fork(X) ) => ( there_is_a_plate | there_is_a_pastaPlate)). 
penalty(10, 1) <- ~(!X : ( fork(X) & there_is_a_teaCup ) => ( there_is_a_plate)). 
}
}



structure S : V {
	time = {breakfast}
	breakfastTime = {breakfast}
	lunchTime = {}
	dinnerTime = {}


	fork = {fork}
	knife = {knife}
	spoon = {}
	plate = {plate}
	bowl = {}
	soupPlate = {}
	teaCup = {}
	waterGlass = {water}
	wineGlass = {}

	RuleNr = {0..1143}
	Penalty = {0..5}

	// above_of = {(f, water)}

	PossCo = {0..3}
	// Example 1 in claudien:
	// position = {(0, 0, 0, fork); (1, 0, 0, plate); (2, 0, 0, knife); (2, 1, 0, water)}
	
	// Example 2 in claudien:
	// position = {(0, 0, 0, fork); (1, 0, 0, plate); (2, 0, 0, knife); (2, 1, 0, wine)}

	// Example 3 in claudien:
	// position = {(0, 0, 0, plate); (1, 0, 0, fork); (2, 0, 0, knife); (2, 1, 0, wine)}

	// Not an example but should work with penalty/penalty
	position = {(0, 0, 0, plate); (1, 0, 0, fork); (2, 0, 0, knife); (2, 1, 0, water)}

	// Breakfast 1: should generate model
	// position = {(0, 0, 0, plate); (1, 0, 0, knife); (1, 1, 0, cup)}

	// Breakfast 3
	// position = {(0, 0, 0, fork); (1, 0, 0, plate); (2, 0, 0, knife); (2, 1, 0, cup); (3, 1, 0, water)}

	// Breakfast: should give unsatisfiable. Because there is a waterGlass and teaCup... (is important rule, without penalty)
	// position = {(0, 0, 0, plate); (0, 0, 1, bowl); (1, 0, 0, knife); (2, 1, 0, cup); (3, 0, 0, spoon); (3, 1, 0, water)}

}

procedure main() {
	stdoptions.nrpropsteps=1
	// stdoptions.longestbranch=1
	stdoptions.liftedunitpropagation=false
	stdoptions.cpsupport=true
	stdoptions.verbosity.grounding=1
	stdoptions.verbosity.solving=1
	stdoptions.groundwithbounds=false
	stdoptions.splitdefs=false

	sol = minimize(T,S,penaltyTerm)[1]
	print(sol[V::penalty].ct)

    	// printmodels(modelexpand(T,S))
	// printcore(T,S)
}






