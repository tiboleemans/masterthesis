vocabulary  V {
	type RuleNr isa int
	type Penalty isa int
	type Object

	type Fork isa Object 
	type Knife isa Object
	type Spoon isa Object
	type SmallKnife isa Object
	
	type Plate isa Object
	type Bowl isa Object
	type PastaPlate isa Object
	type SoupPlate isa Object
	type Saucer isa Object

	type WaterGlass isa Object 
	type WineGlass isa Object
	type TeaCup isa Object

	type PossCo isa int

	fork(Fork)
	knife(Knife)
	spoon(Spoon)
	smallKnife(SmallKnife)

	plate(Plate)
	bowl(Bowl)
	pastaPlate(PastaPlate)
	soupPlate(SoupPlate)
	saucer(Saucer)

	waterGlass(WaterGlass)
	wineGlass(WineGlass)
	teaCup(TeaCup)

	food_container(Object)
	drink_container(Object)
	food_utensil(Object)

	above_of(Object, Object)
	left_of(Object, Object)
	on(Object, Object)

	position(PossCo,PossCo,PossCo,Object)

	there_is_a_fork
	there_is_a_knife
	there_is_a_spoon
	there_is_a_smallKnife
	there_is_a_plate
	there_is_a_bowl
	there_is_a_pastaPlate
	there_is_a_soupPlate
	there_is_a_saucer
	there_is_a_waterGlass
	there_is_a_wineGlass
	there_is_a_teaCup
	
	penalty(RuleNr, Penalty)
}

term penaltyTerm:V{
	sum{X, Y : penalty(X, Y) : Y}
}

theory T : V {
// Necessary background rules
!A, B: above_of(A, B) <=>  ? X, Y1, Y2, Z1, Z2 :(position(X, Y1, Z1, A) & position(X, Y2, Z2, B) & Y1 < Y2).
!A, B: left_of(A, B) <=> ? X1, X2, Y, Z1, Z2 : (position(X1, Y, Z1, A) & position(X2, Y, Z2, B) & X1 + 1 = X2).
!A, B: on(A, B) <=> ? X, Y, Z1, Z2 : (position(X, Y, Z1, A) & position(X, Y, Z2, B) & Z1 < Z2).

(there_is_a_fork) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & fork(Object).
(there_is_a_knife) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & knife(Object).
(there_is_a_spoon) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & spoon(Object).
(there_is_a_smallKnife) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & smallKnife(Object).
(there_is_a_plate) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & plate(Object).
(there_is_a_bowl) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & bowl(Object).
(there_is_a_pastaPlate) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & pastaPlate(Object).
(there_is_a_soupPlate) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & soupPlate(Object).
(there_is_a_saucer) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & saucer(Object).
(there_is_a_waterGlass) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & waterGlass(Object).
(there_is_a_wineGlass) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & wineGlass(Object).
(there_is_a_teaCup) <=> ?X, Y, Z, Object : position(X, Y, Z, Object) & teaCup(Object).

// Rules that always have to satisfy

// Maximum set of rules that have to satisfy with penalty
{
penalty(1, 1) <- ~( !X : ( spoon(X) ) => ( false)).
penalty(2, 1) <- ~( !X : ( smallKnife(X) ) => ( false)).
penalty(3, 1) <- ~( !X : ( bowl(X) ) => ( false)).
penalty(4, 1) <- ~( !X : ( saucer(X) ) => ( false)).
penalty(5, 1) <- ~( !X : ( pastaPlate(X) ) => ( false)).
penalty(6, 1) <- ~( !X : ( soupPlate(X) ) => ( false)).
penalty(7, 1) <- ~( !X : ( wineGlass(X) ) => ( false)).
penalty(8, 1) <- ~( !X : ( teaCup(X) ) => ( false)).
penalty(9, 1) <- ~(( there_is_a_fork)).
penalty(10, 1) <- ~(( there_is_a_knife)).
penalty(11, 1) <- ~(( there_is_a_spoon ) => ( false)).
penalty(12, 1) <- ~(( there_is_a_smallKnife ) => ( false)).
penalty(13, 1) <- ~(( there_is_a_plate)).
penalty(14, 1) <- ~(( there_is_a_bowl ) => ( false)).
penalty(15, 1) <- ~(( there_is_a_pastaPlate ) => ( false)).
penalty(16, 1) <- ~(( there_is_a_soupPlate ) => ( false)).
penalty(17, 1) <- ~(( there_is_a_saucer ) => ( false)).
penalty(18, 1) <- ~(( there_is_a_wineGlass ) => ( false)).
penalty(19, 1) <- ~(( there_is_a_teaCup ) => ( false)).
penalty(20, 1) <- ~( !X : ( left_of(X,X) ) => ( false)).
penalty(21, 1) <- ~( !X : ( above_of(X,X) ) => ( false)).
penalty(22, 1) <- ~( !X : ( on(X,X) ) => ( false)).
penalty(23, 1) <- ~( !X, Y : ( on(X,Y) ) => ( false)).
penalty(24, 1) <- ~( !X : ( fork(X) & knife(X) ) => ( false)).
penalty(25, 1) <- ~( !X : ( fork(X) & plate(X) ) => ( false)).
penalty(26, 1) <- ~( !X : ( fork(X) & waterGlass(X) ) => ( false)).
penalty(27, 1) <- ~( !X, Y : ( fork(X) & above_of(X,Y) ) => ( false)).
penalty(28, 1) <- ~( !X : ( fork(X) & food_container(X) ) => ( false)).
penalty(29, 1) <- ~( !X : ( fork(X) & drink_container(X) ) => ( false)).
penalty(30, 1) <- ~( !X : ( fork(X) ) => ( food_utensil(X))).
penalty(31, 1) <- ~( !X : ( knife(X) & plate(X) ) => ( false)).
penalty(32, 1) <- ~( !X : ( knife(X) & waterGlass(X) ) => ( false)).
penalty(33, 1) <- ~( !X : ( knife(X) & food_container(X) ) => ( false)).
penalty(34, 1) <- ~( !X : ( knife(X) & drink_container(X) ) => ( false)).
penalty(35, 1) <- ~( !X : ( knife(X) ) => ( food_utensil(X))).
penalty(36, 1) <- ~( !X : ( plate(X) & waterGlass(X) ) => ( false)).
penalty(37, 1) <- ~( !X, Y : ( plate(X) & above_of(X,Y) ) => ( false)).
penalty(38, 1) <- ~( !X : ( plate(X) & food_utensil(X) ) => ( false)).
penalty(39, 1) <- ~( !X : ( plate(X) & drink_container(X) ) => ( false)).
penalty(40, 1) <- ~( !X : ( plate(X) ) => ( food_container(X))).
penalty(41, 1) <- ~( !X, Y : ( waterGlass(X) & left_of(X,Y) ) => ( false)).
penalty(42, 1) <- ~( !X, Y : ( waterGlass(X) & above_of(X,Y) ) => ( false)).
penalty(43, 1) <- ~( !X : ( waterGlass(X) & food_utensil(X) ) => ( false)).
penalty(44, 1) <- ~( !X : ( waterGlass(X) & food_container(X) ) => ( false)).
penalty(45, 1) <- ~( !X : ( waterGlass(X) ) => ( drink_container(X))).
penalty(46, 1) <- ~( !X, Y : ( left_of(X,Y) & above_of(X,Y) ) => ( false)).
penalty(47, 1) <- ~( !X, Y : ( left_of(X,Y) & drink_container(X) ) => ( false)).
penalty(48, 1) <- ~( !X, Y : ( left_of(X,Y) & waterGlass(Y) ) => ( false)).
penalty(49, 1) <- ~( !X, Y : ( left_of(X,Y) & left_of(Y,X) ) => ( false)).
penalty(50, 1) <- ~( !X, Y : ( left_of(X,Y) & above_of(Y,X) ) => ( false)).
penalty(51, 1) <- ~( !X, Y : ( left_of(X,Y) & drink_container(Y) ) => ( false)).
penalty(52, 1) <- ~( !X, Y : ( above_of(X,Y) & food_container(X) ) => ( false)).
penalty(53, 1) <- ~( !X, Y : ( above_of(X,Y) & drink_container(X) ) => ( false)).
penalty(54, 1) <- ~( !X, Y : ( above_of(X,Y) & fork(Y) ) => ( false)).
penalty(55, 1) <- ~( !X, Y : ( above_of(X,Y) & knife(Y) ) => ( false)).
penalty(56, 1) <- ~( !X, Y : ( above_of(X,Y) ) => ( knife(X))).
penalty(57, 1) <- ~( !X, Y : ( above_of(X,Y) & plate(Y) ) => ( false)).
penalty(58, 1) <- ~( !X, Y : ( above_of(X,Y) & above_of(Y,X) ) => ( false)).
penalty(59, 1) <- ~( !X, Y : ( above_of(X,Y) & food_utensil(Y) ) => ( false)).
penalty(60, 1) <- ~( !X, Y : ( above_of(X,Y) ) => ( food_utensil(X))).
penalty(61, 1) <- ~( !X, Y : ( above_of(X,Y) & food_container(Y) ) => ( false)).
penalty(62, 1) <- ~( !X : ( food_utensil(X) & food_container(X) ) => ( false)).
penalty(63, 1) <- ~( !X : ( food_utensil(X) & drink_container(X) ) => ( false)).
penalty(64, 1) <- ~( !X : ( food_container(X) & drink_container(X) ) => ( false)).
penalty(65, 1) <- ~( !X : ( food_container(X) ) => ( plate(X))).
penalty(66, 1) <- ~( !X : ( drink_container(X) ) => ( waterGlass(X))).
penalty(67, 1) <- ~( !X, Y : ( fork(X) & left_of(X,Y) & knife(Y) ) => ( false)).
penalty(68, 1) <- ~( !X, Y : ( knife(X) & left_of(X,Y) ) => ( there_is_a_waterGlass)).
penalty(69, 1) <- ~( !X, Y : ( knife(X) & left_of(X,Y) & fork(Y) ) => ( false)).
penalty(70, 1) <- ~( !X, Y : ( knife(X) & left_of(X,Y) ) => ( knife(Y))).
penalty(71, 1) <- ~( !X, Y : ( knife(X) & left_of(X,Y) & plate(Y) ) => ( false)).
penalty(72, 1) <- ~( !X, Y : ( knife(X) & left_of(X,Y) ) => ( food_utensil(Y))).
penalty(73, 1) <- ~( !X, Y : ( knife(X) & left_of(X,Y) & food_container(Y) ) => ( false)).
penalty(74, 1) <- ~( !X, Y : ( plate(X) & left_of(X,Y) & fork(Y) ) => ( false)).
penalty(75, 1) <- ~( !X, Y : ( plate(X) & left_of(X,Y) ) => ( knife(Y))).
penalty(76, 1) <- ~( !X, Y : ( plate(X) & left_of(X,Y) & plate(Y) ) => ( false)).
penalty(77, 1) <- ~( !X, Y : ( plate(X) & left_of(X,Y) ) => ( food_utensil(Y))).
penalty(78, 1) <- ~( !X, Y : ( plate(X) & left_of(X,Y) & food_container(Y) ) => ( false)).
penalty(79, 1) <- ~( !X, Y : ( there_is_a_waterGlass & above_of(X,Y) ) => ( waterGlass(Y))).
penalty(80, 1) <- ~( !X, Y : ( there_is_a_waterGlass & above_of(X,Y) ) => ( drink_container(Y))).
penalty(81, 1) <- ~( !X, Y : ( left_of(X,Y) & fork(Y) ) => ( there_is_a_waterGlass)).
penalty(82, 1) <- ~( !X, Y : ( above_of(X,Y) & waterGlass(Y) ) => ( there_is_a_waterGlass)).
penalty(83, 1) <- ~( !X, Y : ( above_of(X,Y) & drink_container(Y) ) => ( there_is_a_waterGlass)).
penalty(84, 1) <- ~( !X, Y : ( left_of(X,Y) & food_container(X) & fork(Y) ) => ( false)).
penalty(85, 1) <- ~( !X, Y : ( left_of(X,Y) & food_container(X) ) => ( knife(Y))).
penalty(86, 1) <- ~( !X, Y : ( left_of(X,Y) & food_container(X) & plate(Y) ) => ( false)).
penalty(87, 1) <- ~( !X, Y : ( left_of(X,Y) & food_container(X) ) => ( food_utensil(Y))).
penalty(88, 1) <- ~( !X, Y : ( left_of(X,Y) & food_container(X) & food_container(Y) ) => ( false)).
penalty(89, 1) <- ~( !X, Y : ( left_of(X,Y) & fork(Y) ) => ( fork(X))).
penalty(90, 1) <- ~( !X, Y : ( left_of(X,Y) & fork(Y) ) => ( food_utensil(X))).
penalty(91, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( fork(X) | knife(Y))).
penalty(92, 1) <- ~( !X, Y : ( left_of(X,Y) & plate(Y) ) => ( fork(X))).
penalty(93, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( fork(X) | food_utensil(Y))).
penalty(94, 1) <- ~( !X, Y : ( left_of(X,Y) & food_container(Y) ) => ( fork(X))).
penalty(95, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( knife(Y) | food_utensil(X))).
penalty(96, 1) <- ~( !X, Y : ( left_of(X,Y) & plate(Y) ) => ( food_utensil(X))).
penalty(97, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( plate(X) | food_utensil(X))).
penalty(98, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( plate(Y) | food_utensil(Y))).
penalty(99, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( food_utensil(X) | food_utensil(Y))).
penalty(100, 1) <- ~( !X, Y : ( left_of(X,Y) & food_container(Y) ) => ( food_utensil(X))).
penalty(101, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( food_utensil(X) | food_container(X))).
penalty(102, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( food_utensil(Y) | food_container(Y))).
penalty(103, 1) <- ~( !X : ( food_utensil(X) ) => ( fork(X) | knife(X))).
penalty(104, 1) <- ~( !X, Y : ( fork(X) & left_of(X,Y) ) => ( there_is_a_waterGlass | plate(Y))).
penalty(105, 1) <- ~( !X, Y : ( fork(X) & left_of(X,Y) & food_utensil(Y) ) => ( there_is_a_waterGlass)).
penalty(106, 1) <- ~( !X, Y : ( fork(X) & left_of(X,Y) ) => ( there_is_a_waterGlass | food_container(Y))).
penalty(107, 1) <- ~( !X, Y : ( fork(X) & left_of(X,Y) ) => ( fork(Y) | plate(Y))).
penalty(108, 1) <- ~( !X, Y : ( fork(X) & left_of(X,Y) & food_utensil(Y) ) => ( fork(Y))).
penalty(109, 1) <- ~( !X, Y : ( fork(X) & left_of(X,Y) ) => ( fork(Y) | food_container(Y))).
penalty(110, 1) <- ~( !X, Y : ( left_of(X,Y) & food_utensil(X) ) => ( there_is_a_waterGlass | fork(X))).
penalty(111, 1) <- ~( !X, Y : ( left_of(X,Y) & food_utensil(X) & knife(Y) ) => ( there_is_a_waterGlass)).
penalty(112, 1) <- ~( !X, Y : ( left_of(X,Y) & food_utensil(X) ) => ( there_is_a_waterGlass | plate(Y))).
penalty(113, 1) <- ~( !X, Y : ( left_of(X,Y) & food_utensil(X) & food_utensil(Y) ) => ( there_is_a_waterGlass)).
penalty(114, 1) <- ~( !X, Y : ( left_of(X,Y) & food_utensil(X) ) => ( there_is_a_waterGlass | food_container(Y))).
penalty(115, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( there_is_a_waterGlass | fork(X) | plate(X))).
penalty(116, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( there_is_a_waterGlass | fork(X) | food_container(X))).
penalty(117, 1) <- ~( !X, Y : ( left_of(X,Y) & knife(Y) ) => ( there_is_a_waterGlass | plate(X))).
penalty(118, 1) <- ~( !X, Y : ( left_of(X,Y) & knife(Y) ) => ( there_is_a_waterGlass | food_container(X))).
penalty(119, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( there_is_a_waterGlass | knife(Y) | plate(Y))).
penalty(120, 1) <- ~( !X, Y : ( left_of(X,Y) & food_utensil(Y) ) => ( there_is_a_waterGlass | knife(Y))).
penalty(121, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( there_is_a_waterGlass | knife(Y) | food_container(Y))).
penalty(122, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( there_is_a_waterGlass | plate(X) | plate(Y))).
penalty(123, 1) <- ~( !X, Y : ( left_of(X,Y) & food_utensil(Y) ) => ( there_is_a_waterGlass | plate(X))).
penalty(124, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( there_is_a_waterGlass | plate(X) | food_container(Y))).
penalty(125, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( there_is_a_waterGlass | plate(Y) | food_container(X))).
penalty(126, 1) <- ~( !X, Y : ( left_of(X,Y) & food_utensil(Y) ) => ( there_is_a_waterGlass | food_container(X))).
penalty(127, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( there_is_a_waterGlass | food_container(X) | food_container(Y))).
penalty(128, 1) <- ~( !X, Y : ( left_of(X,Y) & food_utensil(X) & knife(Y) ) => ( knife(X))).
penalty(129, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( fork(X) | knife(X) | plate(X))).
penalty(130, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( fork(X) | knife(X) | food_container(X))).
penalty(131, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( fork(Y) | knife(Y) | plate(Y))).
penalty(132, 1) <- ~( !X, Y : ( left_of(X,Y) ) => ( fork(Y) | knife(Y) | food_container(Y))).
penalty(133, 1) <- ~( !X, Y : ( left_of(X,Y) & knife(Y) ) => ( knife(X) | plate(X))).
penalty(134, 1) <- ~( !X, Y : ( left_of(X,Y) & knife(Y) ) => ( knife(X) | food_container(X))).
}
}



structure S : V {


	fork = {fork1; fork2}
	knife = {knife1; knife2}
	spoon = {}
	plate = {plate}
	bowl = {}
	soupPlate = {}
	teaCup = {}
	waterGlass = {water}
	wineGlass = {}

	RuleNr = {0..134}
	Penalty = {0..1}

	// above_of = {(f, water)}

	PossCo = {0..4}
	// Example 1 in claudien:
	// position = {(0, 0, 0, fork); (1, 0, 0, plate); (2, 0, 0, knife); (2, 1, 0, water)}
	
	// Example 2 in claudien:
	// position = {(0, 0, 0, fork); (1, 0, 0, plate); (2, 0, 0, knife); (2, 1, 0, wine)}

	// Example 3 in claudien:
	// position = {(0, 0, 0, plate); (1, 0, 0, fork); (2, 0, 0, knife); (2, 1, 0, wine)}

	// Not an example but should work with penalty/penalty
	// position = {(0, 0, 0, plate); (1, 0, 0, fork); (2, 0, 0, knife); (2, 1, 0, water)}

	// Breakfast 1: should generate model
	// position = {(0, 0, 0, plate); (1, 0, 0, knife); (1, 1, 0, cup)}

	// Breakfast 3
	// position = {(0, 0, 0, fork); (1, 0, 0, plate); (2, 0, 0, knife); (2, 1, 0, cup); (3, 1, 0, water)}

	// Breakfast: should give unsatisfiable. Because there is a waterGlass and teaCup... (is important rule, without penalty)
	// position = {(0, 0, 0, plate); (0, 0, 1, bowl); (1, 0, 0, knife); (2, 1, 0, cup); (3, 0, 0, spoon); (3, 1, 0, water)}

	// Multiple forks and knifes
	position = {(0, 0, 0, fork1); (1, 0, 0, fork2); (2, 0, 0, plate); (3, 0, 0, knife1); (4, 0, 0, knife2); (4, 1, 0, water)}

}

procedure main() {
	stdoptions.nrpropsteps=1
	// stdoptions.longestbranch=1
	stdoptions.liftedunitpropagation=false
	stdoptions.cpsupport=true
	stdoptions.verbosity.grounding=1
	stdoptions.verbosity.solving=1
	stdoptions.groundwithbounds=false
	stdoptions.splitdefs=false

	sol = minimize(T,S,penaltyTerm)[1]
	print(sol[V::penalty].ct)

    	// printmodels(modelexpand(T,S))
	// printcore(T,S)
}






